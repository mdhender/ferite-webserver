#! /usr/bin/env ferite

uses 'console', 'regexp', 'posix', 'sys', './httpserver';

function either (void a, void b) {
	if (a) return a;
	else   return b;
}

class ConsoleServer {
	array commands;
	
	function handleRequest () {
		string cmd_string = Console.readln();
		string cmd;
		if (cmd_string != '') {
			array args = Regexp.split('\s+',cmd_string);
			cmd = args.shift();
			
			if (.commands[cmd]) .commands[cmd].invoke(args);
			else                    .commands.unknown.invoke(cmd);
		}
	}
	
	function constructor () {
		Console.stdin.nonblock();
		
		.commands['exit'] = closure (array args) {
			Sys.exit(0);
		};

		.commands['descriptors'] = closure (array args) {
			Console.println(EventLoop.descriptors.join("\n"));
		};

		.commands['d'] = .commands.descriptors;

		.commands['eval'] = closure (array args) {
			monitor {
				Console.println(eval('return ' + args.join(' ')));
			}
			handle {
				Console.println(err);
			}
		};

		.commands['unknown'] = closure (string cmd) {
			Console.println("Unknown command: $cmd");
		};
		
		EventLoop.add(Console.stdin,self);
	}
}

array pages;
number counter = 0;
object myServer = new HttpServer(9090);
object commandLine = new ConsoleServer();

pages['/counter'] = closure (object req) {
	string html = "<html><body><h1>OK</h1>Count = ${counter}</body></html>";
	array res = [
		'HTTP/1.0 200 OK',
		'Content-Type: text/html',
		'Content-Length: ' + html.length(),
		'',
		html
	];
	
	// Console.println("count = ${counter}");
	counter ++;
	
	req.socket.print(res.join("\n"));
	req.socket.flush();
};

pages['/setcounter'] = closure (object req) {
	string html;
	array res;
	
	if (req.request.method == 'POST') {
		req.onPostData() using (req, content) {
			array q = req.parseQueryString(content);
			
			if (q.counter) {
				if (q.counter.isNumber())
					counter = q.counter.toNumber();
			}
			
			pages.renderSetCounter.invoke(req);
		};
	}
	else {
		pages.renderSetCounter.invoke(req);
	}
};

pages['renderSetCounter'] = closure (object req) {
	string html =
		"<html><body>" +
			"<h1>OK</h1>" +
			"Count = ${counter}" +
			"<form action='/setcounter' method='post'>" +
				"<div>" +
					"<label for='counter'>New value:</label>" +
					"<input type='text' id='counter' name='counter'>" +
				"</div>" +
				"<div>" +
					"<button type='submit'>Set Counter</button>" +
				"</div>" +
			"</form>" +
		"</body></html>";
	array res = [
		'HTTP/1.0 200 OK',
		'Content-Type: text/html',
		'Content-Length: ' + html.length(),
		'',
		html
	];
	req.socket.print(res.join("\n"));
	req.socket.flush();
};
	
pages['/stress'] = closure (object req) {
	number clients = (either(req.query('clients'),'200')).toNumber();
	number poll_rate = (either(req.query('rate'),'1')).toNumber();
	string html =
		"<html><body><h1>Stress Test</h1>" +
			"Simulating " + clients + " clients " +
			"each attempting to poll every " + poll_rate + " second." +
			"<div>" +
				"Request per second: <span id='rate'></span> " +
				"(long average: <span id='avg'></span>)" +
			"</div>" +
			"<div id='c'></div>" +
			"<script src='http://code.jquery.com/jquery-2.1.0.min.js'></script>" +
			"<script>" +
			"var requests = 0;" +
			"var total_requests = 0;" +
			"function ajax_loop (id) {" +
				"var then = new Date();" +
				"$.ajax({" +
					"type: 'get'," +
					"url: '/counter'," +
					"cache: false," +
					"dataType: 'text'," +
					"success: function (result) {" +
						"var now = new Date();" +
						"requests++;total_requests++;" +
						"$('#'+id).html(" +
							"result.match(/Count\\s*=\\s*\\d+/) + ' (' + " +
							"(now-then) + 'ms)');" +
						"setTimeout(function(){ajax_loop(id)}," + (poll_rate*1000) + ");" +
					"}" +
				"});" +
			"};" +
			"var lap = new Date();" +
			"var total_lap = new Date();" +
			"setInterval(function(){" +
				"var now = new Date();" +
				"var rate = requests/((now-lap)/1000);" +
				"var avg = total_requests/((now-total_lap)/1000);" +
				"lap = now;" +
				"$('#rate').html(rate.toFixed(2));" +
				"$('#avg').html(avg.toFixed(2));" +
				"requests = 0;" +
			"},1000);" +
			"function make_counters (n) {" +
				"while (n) {" +
					"$('#c').append('<div id=\\'c' + n + '\\'></div>');" +
					"ajax_loop('c'+n);" +
					"n--;" +
				"}" +
			"}" +
			"make_counters(" + clients + ");" +
			"</script>" +
		"</body></html>";
	array res = [
		'HTTP/1.0 200 OK',
		'Content-Type: text/html',
		'Content-Length: ' + html.length(),
		'',
		html
	];
	
	req.socket.print(res.join("\n"));
	req.socket.flush();
};

pages['404'] = closure (object req) {
	string html = "<html><body><h1>ERROR 404</h1>Sorry, file not found.</body></html>";
	array res = [
		'HTTP/1.0 404 Not Found',
		'Content-Type: text/html',
		'Content-Length: ' + html.length(),
		'',
		html
	];
	
	req.socket.print(res.join("\n"));
	req.socket.flush();
};

myServer.onRequest() using(req) {
	string path = req.request.path;
		
	if (pages[path]) pages[path].invoke(req);
	else             pages['404'].invoke(req);
	
	if (!req.hasContent()) {
		req.close();
	}
};

EventLoop.listen();
