uses 'network', 'posix', 'sys', './eventloop';

class TcpServerRequest {
	string buffer;
	object socket;
	object handler;
	
	function fillBuffer () {
		.buffer += .socket.read(524288);
	}
	
	function handleRequest () {
		.fillBuffer();
		.handler.invoke(self);
	}
	
	function close () {
		EventLoop.delete(.socket);
		.socket = null;
	}
}

/**
 * @class TcpServer
 * @brief Asynchronous, non-blocking TCP server
 * @param number port number to open the listening socket on
 * @description This module uses EventLoop to implement event oriented
 *              asynchronous TCP servers. It abstracts away all the
 *              messy socket and select control structures so that
 *              you can concentrate on writing your server instead
 *              of managing sockets.
 * @example <nl/>
 *  <code>object myServer = new TcpServer(9090);<nl/>
 * <nl/>
 * // Simple echo server:<nl/>
 * myServer.onRequest() using(connection) {<nl/>
 * <tab/>connection.socket.print(connection.buffer);<nl/>
 * <tab/>connection.buffer = "";<nl/>
 * };<nl/>
 * <nl/>
 * EventLoop.listen();</code><nl/>
 */
class TcpServer {
	object socket;
	object handler;

	function constructor (number port) {
		.socket = Network.TCP.bind(Network.ANY,port);
		.socket.nonblock();
		if (.socket != null) {
			EventLoop.add(.socket,self);
		}
		else {
			Sys.error("Unable to open tcp port ${port}",2);
		}
	}
	
	function createRequestObject () {
		return new TcpServerRequest();
	}
	
	function onRequest (object handler) {
		.handler = handler;
	}
	
	function onRequest () {
		object handler = recipient();
		if (handler) {
			.onRequest(handler);
		}
	}
	
	function listen () {
		object handler = recipient();
		if (handler) {
			.onRequest(handler);
			EventLoop.listen();
		}
		else {
			// Error here
		}
	}
	
	function handleRequest () {
		object client_connection = .socket.accept();
		object request = .createRequestObject();
		
		// Console.println("\n\ngot connection from client..");
		
		client_connection.nonblock();
		request.socket = client_connection;
		request.handler = .handler;
		
		EventLoop.add(client_connection,request);
	}
}
