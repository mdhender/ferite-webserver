uses 'regexp', 'sys', 'date', './tcpserver';

global {
	array _httpStatusCode_;
}

class HttpServerRequest extends TcpServerRequest {
	number sync_post = 0;
	array request;
	array headers;
	array out_headers;
	array cookies;
	array out_cookies;
	array query;
	string post_data;
	private string httpDateFormat = '%a, %d %b %Y %H:%M:%S %z GMT';
	private object content_handler;
	
	function parseHeaders (array lines) {
		array headers;
		// Note: Header names are converted to lower case for consistency
		
		lines.each() using (h) {
			h = Regexp.replace('[^[:print:]]',h,''); // remove garbage characters
			if (h != '') {
				array header_fragments = Regexp.split('\s*:\s*',h);
				if (header_fragments.size() > 1) {
					string key = header_fragments[0];
					string lowercase_key = key.toLower();
					string underscore_key = Regexp.replace('-',lowercase_key,'_');
					string value_text = header_fragments[1..].join(':');
					void value;
					
					// Automatic conversion for numerical values:
					if (value_text.isNumber()) value = value_text.toNumber();
					else                       value = value_text;
					
					headers[key] = value;
					headers[lowercase_key] = value;
					headers[underscore_key] = value;
				}
			}
		};
		return headers;
	}
	
	function timestamp () {
		return Date.date(Date.GMTnow()).format(.httpDateFormat);
	}

	function parseRequestCommand (string request_text) {
		array r = Regexp.split('\s+',request_text);
		if (r.size() == 3) {
			array c = [
				'text' => request_text,
				'method' => r[0],
				'fullpath' => r[1],
				'protocol' => r[2]
			];
			array q = c.fullpath.toArray('?');
			c['path'] = q[0];
			if (q.size() > 1) {
				c['query_string'] = q[1];
			}
			else {
				c['query_string'] = '';
			}
		}
		else {
			Sys.error('Invalid HTTP request',1);
		}
		return c;
	}

	function parseQueryString (string query_text) {
		if (query_text != '') {
			query_text.toArray('&').each() using (p) {
				array r = p.toArray('=');
				if (r.size() == 2) {
					.query[r[0]] = Regexp
						.replaceAll('%([0-9a-fA-F]{2})',r[1],'\x\1')
						.unescape();
				}
				else if (r.size() == 1) {
					.query[r[0]] = '';
				}
			};
		}
	}
	
	private function cleanup () {
		.request = [];
		.headers = [];
		.out_headers = [];
		.cookies = [];
		.out_cookies = [];
		.query = [];
		.post_data = '';
	}
	
	private function processContentLength () {
		number buffer_length = .buffer.length();
		number content_length = .headers.content_length;
		
		if (buffer_length >= content_length) {
			if (buffer_length > content_length) {
				.post_data = .buffer[.. content_length];
				.buffer = .buffer[content_length+1 ..];
			}
			else {
				.post_data = .buffer;
				.buffer = '';
			}
			if (
				.headers['content_type'] != null &&
				.headers.content_type.index('x-www-form-urlencoded') > -1
			) {
				.parseQueryString(.post_data);
			}
			
			if (.sync_post) {
				.handler.invoke(self);
			}
			else {
				.content_handler.invoke(self,.post_data);
			}
			.cleanup();
		}
	}
	
	private function processChunked () {
	
	}
	
	private function processPOST () {
		if (.content_handler || (.sync_post && .handler)) {
			array h = .headers;
			
			if (
				h['content_length'] != null &&
				h.content_length > 0
			) {
				.processContentLength();
			}
			else if (
				h['transfer_encoding'] != null &&
				h.transfer_encoding == 'chunked'
			) {
					.processChunked();
			}
		}
	}
	
	private function parseHttp () {
		if (!.request) {
			object m = Regexp.match("\n\\s*\n",.buffer);
			if (m) {
				string header_text = .buffer[.. m.start()-1];
				array lines = Regexp.split("\r*\n",header_text);
				if (m.end() < .buffer.length()) {
					.buffer = .buffer[m.end() ..];
				}
				else {
					.buffer = '';
				}
			
				.request = .parseRequestCommand(lines[0]);
				.parseQueryString(.request.query_string);
				.headers = .parseHeaders(lines[1..]);
				
				if (!(.request.method == 'POST' && .sync_post))
					.handler.invoke(self);
			}
		}
		
		// Not using else because we may need to process
		// this after invoking the handler callback.
		
		if (.request) {
			if (.request.method == 'POST') {
				.processPOST();
			}
			else {
				// Only POST has content so cleanup request if not POST:
				.cleanup();
			}
		}
	}
	
	function onPostData () {
		object handler = recipient();
		if (handler) {
			.content_handler = handler;
		}
	}
	
	function hasContent () {
		if (.content_handler) return true;
		else                      return false;
	}
	
	function query (string key) {
		return .query[key];
	}
	
	function handleRequest () {
		.fillBuffer();
		.parseHttp();
	}
	
	/**
	 * @function contentType
	 * @declaration function contentType(string) 
	 * @brief  Set the content-type HTTP-header for this request 
	 * @param string
	 */
	function contentType(string type)  {
		.out_headers['Content-Type'] = type;
	}
	
	/**
	 * @function cookies
	 * @declaration function cookies() 
	 * @brief  Retreive the cookies returned by the client 
	 */
	function cookies()  {
		if (! .cookies.size() && .headers.cookie ) {
			array cc = Regexp.split('\s*;\s*', .headers.cookie);
			cc.each() using (c) {
				object m = Regexp.match('([^=]+)=(.*)',c);
				if (m) .cookies[m.capture(0)] = m.capture(1);
			};
		}
		return .cookies;
	}
	
	/**
	 * @function current
	 * @declaration function current() 
	 * @brief  Return an instance of the current http request. 
	 */
	function current()  {
		return self; // Note: this is essentially unimplemented.
	}
	
	/**
	 * @function documentRoot
	 * @declaration function documentRoot() 
	 * @brief  returns the servers document root 
	 */
	function documentRoot()  {
	}
	
	/**
	 * @function filename
	 * @declaration function filename() 
	 * @brief  The full filepath + filename 
	 */
	function filename()  {
	}
	
	/**
	 * @function filepath
	 * @declaration function filepath() 
	 * @brief  Full filepath of the script. 
	 */
	function filepath()  {
	}
	
	/**
	 * @function fullUri
	 * @declaration function fullUri() 
	 * @brief  Returns the entire uri. 
	 */
	function fullUri()  {
		return .request.fullpath;
	}
	
	/**
	 * @function getParams
	 * @declaration function getParams(string) 
	 * @brief  This function will fetch all parameters passed via the request that match a given name and return an array. 
	 * @param string
	 */
	function getParams(string key)  {
		return .query[key];
	}
	
	/**
	 * @function hostname
	 * @declaration function hostname() 
	 * @brief  Retrieve the hostname of the running server 
	 */
	function hostname()  {
	}
	
	/**
	 * @function inHeaders
	 * @declaration function inHeaders(string) 
	 * @brief  Retrieve a selected HTTP-header 
	 * @param string
	 */
	function inHeaders(string key)  {
		return .headers[key];
	}
	
	/**
	 * @function location
	 * @declaration function location(string) 
	 * @brief  Send a 302 to the browser 
	 * @param string
	 */
	function location(string url)  {
		array res = [
			'HTTP/1.0 302 Found',
			'Location: ' + url,
			''
		];
		
		.socket.print(res.join("\n"));
		.socket.flush();
		EventLoop.delete(.socket);
	}
	
	/**
	 * @function logError
	 * @declaration function logError(string) 
	 * @brief  Log an error in apaches error log. 
	 * @param string
	 */
	function logError(string message)  {
	}
	
	/**
	 * @function method
	 * @declaration function method() 
	 * @brief  Retreive the method used for the request and later be written to the browser. 
	 */
	function method()  {
		return .request.method;
	}
	
	/**
	 * @function noCache
	 * @declaration function noCache() 
	 * @brief  Set correct headers and tell the client to not stor this page in a cache. 
	 */
	function noCache()  {
		.out_headers['Expires'] = '0';
		.out_headers['Pragma'] = 'no-cache';
		.out_headers['Cache-Control'] = 'no-store, no-cache, must-revalidate';
	}
	
	/**
	 * @function outHeaders
	 * @declaration function outHeaders(string key,string value) 
	 * @brief  set the specified value of an HTTP- header 
	 * @param key, value
	 */
	function outHeaders(string key,string value)  {
		.out_headers[key] = value;
	}
	
	/**
	 * @function parsedUri
	 * @declaration function parsedUri() 
	 * @brief  Return the path portion of the uri 
	 */
	function parsedUri()  {
		return .request.path;
	}
	
	/**
	 * @function pathInfo
	 * @declaration function pathInfo() 
	 * @brief  If you have a request like http://example.com/index.fe/Hi, this function will return "/Hi" 
	 */
	function pathInfo()  {
		return Regexp.match('[^/]*$',.request.path).match();
	}
	
	/**
	 * @function print
	 * @declaration function print(string) 
	 * @brief  Print a string to the browser 
	 * @param string
	 */
	function print(string text)  {
	}
	
	/**
	 * @function query
	 * @declaration function query() 
	 * @brief  Fetch the query name and values 
	 */
	function query()  {
		return .query;
	}
	
	/**
	 * @function queryString
	 * @declaration function queryString() 
	 * @brief  Retrieve the unmodified query string 
	 */
	function queryString()  {
		return .request.query_string;
	}
	
	/**
	 * @function redirectURL
	 * @declaration function redirectURL() 
	 * @brief  returns the redirected url 
	 */
	function redirectURL()  {
	}
	
	/**
	 * @function referer
	 * @declaration function referer() 
	 * @brief  The url in the referer header. 
	 */
	function referer()  {
		return .headers['referer'];
	}
	
	/**
	 * @function remoteHost
	 * @declaration function remoteHost() 
	 * @brief  The name of the remote host if possible 
	 */
	function remoteHost()  {
	}
	
	/**
	 * @function remoteIp
	 * @declaration function remoteIp() 
	 * @brief  Fetch the remote hosts ip. 
	 */
	function remoteIp()  {
		return .socket.remoteip;
	}
	
	/**
	 * @function scriptname
	 * @declaration function scriptname() 
	 * @brief  The name of the running script 
	 */
	function scriptname()  {
	}
	
	/**
	 * @function serverRoot
	 * @declaration function serverRoot() 
	 * @brief  returns the server root 
	 */
	function serverRoot()  {
	}
	
	/**
	 * @function setCookie
	 * @declaration function setCookie(string) 
	 * @brief  Send a coookie to the client browser. 
	 * @param string
	 */
	function setCookie(string cookie)  {
	}
	
	/**
	 * @function uniqueId
	 * @declaration function uniqueId() 
	 * @brief  return a unique id 
	 */
	function uniqueId()  {
	}
	
	/**
	 * @function uri
	 * @declaration function uri() 
	 * @brief  Retrieve the actual unparsed uri for the request 
	 */
	function uri()  {
	}
	
	/**
	 * @function urlDecode
	 * @declaration function urlDecode(string) 
	 * @brief  Decode an url encoded string. 
	 * @param string
	 */
	function urlDecode(string url)  {
	}
	
	/**
	 * @function urlEncode
	 * @declaration function urlEncode(string) 
	 * @brief  Url encode a string 
	 * @param string
	 */
	function urlEncode(string url)  {
	}
	
	/**
	 * @function userAgent
	 * @declaration function userAgent() 
	 * @brief  The name of clients user agent 
	 */
	function userAgent()  {
	}
	
	function respond (string body) {
		.respond(200,body);
	}
	
	function respond (number code, string body) {
		array res;
		string status_code = ''+code;
		string status_text = '';
		if (_httpStatusCode_[status_code]) {
			status_text = _httpStatusCode_[status_code];
		}
		res.push("HTTP/1.0 $status_code $status_text");
		.out_headers['Date'] = .timestamp();
		.out_headers['Content-Length'] = body.length();
		.out_headers.keys().each() using (key) {
			res.push("${key}: ${.out_headers[key]}");
		};
		res.push('');
		res.push(body);
		
		.socket.print(res.join("\n"));
		.socket.flush();
	}
}

class HttpServer extends TcpServer {
	number sync_post = 0;
	
	function createRequestObject () {
		object req = new HttpServerRequest();
		req.sync_post = .sync_post;
		return req;
	}
}

_httpStatusCode_ = [
		'100' => 'Continue',
		'200' => 'OK',
		'201' => 'Created',
		'202' => 'Accepted',
		'204' => 'No Content',
		'301' => 'Moved Permanently',
		'302' => 'Found',
		'303' => 'See Other',
		'304' => 'Not Modified',
		'307' => 'Temporary Redirect',
		'308' => 'Permanent Redirect',
		'400' => 'Bad Request',
		'401' => 'Unauthorized',
		'403' => 'Forbidden',
		'404' => 'Not Found',
		'500' => 'Internal Server Error',
		'501' => 'Not Implemented'
];
